{"version":3,"file":"65.js","mappings":"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","sources":["./src/app/modules/application/books/book-services/book-search.service.ts","./src/app/modules/application/books/books-routing.module.ts","./src/app/modules/application/books/books.component.ts","./src/app/modules/application/books/books.component.html","./src/app/modules/application/books/books.module.ts","./src/app/services/localstorage.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { catchError, map, tap, filter } from \"rxjs/operators\";\n\nimport { Book, GoogleBooksApiInterface } from \"../book-models/books\";\n\nconst apiUrl = \"https://www.googleapis.com/books/v1/volumes\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class GoogleBookService {\n  constructor(private http: HttpClient) {}\n\n  findBook(title: string): Observable<Book[]> {\n    return this.http\n      .get<GoogleBooksApiInterface>(`${apiUrl}?q=${title}&maxResults=40`)\n      .pipe(\n        // tap((data: GoogleBooksApiInterface) =>\n        //   console.log(\"data: \", data.items)\n        // ),\n        map((data: GoogleBooksApiInterface) => data.items?.filter(item => item.saleInfo.saleability !== \"NOT_FOR_SALE\") || []),\n        catchError((err) => {\n          throw \"error in getting API data. Details: \" + err;\n        })\n      );\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { BooksComponent } from \"./books.component\";\n\nconst routes: Routes = [{ path: \"\", component: BooksComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BooksRoutingModule {}\n","import { Component, OnInit, Inject, PLATFORM_ID } from \"@angular/core\";\nimport { isPlatformBrowser } from \"@angular/common\";\nimport { Observable } from \"rxjs\";\nimport { Router, NavigationExtras } from \"@angular/router\";\nimport { UntypedFormGroup, UntypedFormBuilder } from \"@angular/forms\";\n\nimport { GoogleBookService } from \"./book-services/book-search.service\";\nimport { PersistanceService } from \"../../../services/localstorage.service\";\nimport { Book } from \"./book-models/books\";\n\n@Component({\n  selector: \"app-books\",\n  templateUrl: \"./books.component.html\",\n  styleUrls: [\"./books.component.css\"],\n})\nexport class BooksComponent implements OnInit {\n  books: Book[];\n  data: Observable<Book[]>;\n  searchForm: UntypedFormGroup;\n  searchedItem: string;\n  searchString: string;\n  searchedBooks: Book[];\n  booksArray: {};\n  storedItems = false;\n\n  constructor(\n    private googleBookService: GoogleBookService,\n    private router: Router,\n    private fb: UntypedFormBuilder,\n    private storageService: PersistanceService,\n    @Inject(PLATFORM_ID) private platformId: object\n  ) {}\n\n  ngOnInit(): void {\n    // check if platform browser then show stored book array if it exists\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.booksArray !== null) {\n        this.storedItems = true;\n        this.booksArray = this.storageService.get(\"this.searchedBooks\");\n      } else {\n        this.storedItems = false;\n        console.log(\"There is no book search in storage\");\n      }\n    }\n    this.searchForm = this.fb.group({\n      searchQuery: [\"\"],\n    });\n  }\n\n  // ngOnDestroy(): void {\n  //   this.clearStore();\n  // }\n\n  clearStore(): void {\n    this.storageService.clear();\n    this.searchForm.reset();\n    this.booksArray = [];\n    this.storedItems = false;\n  }\n  // search for books and store search query.\n  bookQuery(userQuery: string): void {\n    if (userQuery && userQuery.length) {\n      if (isPlatformBrowser(this.platformId)) {\n        this.storageService.set(\"this.searchedItem\", userQuery);\n        this.searchString = this.storageService.get(\"this.searchedItem\");\n        this.storedItems = true;\n        this.googleBookService\n          .findBook(this.searchString)\n          .subscribe((data: Book[]) => {\n            this.books = data;\n            this.storageService.set(\"this.searchedBooks\", this.books);\n            this.booksArray = this.storageService.get(\"this.searchedBooks\");\n          });\n      } else {\n        this.googleBookService\n          .findBook(this.searchString)\n          .subscribe((data: Book[]) => {\n            this.booksArray = data;\n          });\n      }\n    }\n  }\n\n  onGoToBookDetail(book: Book): void {\n    const navigationExtras: NavigationExtras = {\n      state: {\n        book,\n      },\n    };\n    this.router.navigate([\"/book-detail\"], navigationExtras);\n  }\n\n  bookTrackbyFn(index: number, item: any): number {\n    return item.bookId;\n  }\n}\n","<head>\n  <meta name=\"description\" content=\"Shows data from the Google Books api\" />\n  <!-- <link rel=\"preload\" href=\"http://books.google.com\" as \"fetch\"> -->\n</head>\n\n<body>\n  <div class=\"main-div\">\n    <!--card for user book search-->\n    <div class=\"rounded card\">\n      <div class=\"card-body bg-light\">\n        <!--User input of book title-->\n        <form\n          #searchForm=\"ngForm\"\n          (ngSubmit)=\"bookQuery(searchWord.value); searchForm.reset()\"\n        >\n          <input\n            #searchWord=\"ngModel\"\n            type=\"text\"\n            ngModel\n            name=\"searchQuery\"\n            id=\"searchQuery\"\n            placeholder=\"Enter book title..\"\n            aria-label=\"Enter book title\"\n            name=\"search\"\n            required\n          />\n          <button\n            class=\"btn btn-dark\"\n            [disabled]=\"searchForm.invalid\"\n            type=\"submit\"\n          >\n            Search\n          </button>\n          <button\n            *ngIf=\"storedItems\"\n            class=\"btn btn-warning\"\n            type=\"button\"\n            (click)=\"clearStore()\"\n          >\n            Clear\n          </button>\n        </form>\n      </div>\n    </div>\n    <!--cards for book search result-->\n    <div class=\"row\" *ngIf=\"booksArray\">\n      <div\n        class=\"p-2 text-center book-card col-lg-2 col-md-3 col-sm-3 col-xs-6\"\n        *ngFor=\"let book of booksArray; trackBy: bookTrackbyFn\"\n      >\n        <img\n          src=\"{{\n            book.volumeInfo.imageLinks != undefined\n              ? book.volumeInfo.imageLinks.smallThumbnail\n              : 'assets/params/images/not-found.png'\n          }}\"\n          style=\"width: 140px; height: 224px\"\n          (click)=\"onGoToBookDetail(book)\"\n          alt=\"Book image\"\n        />\n      </div>\n    </div>\n  </div>\n</body>\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { BooksComponent } from \"./books.component\";\nimport { BooksRoutingModule } from \"./books-routing.module\";\nimport { PersistanceService } from \"../../../services/localstorage.service\";\n\n@NgModule({\n  imports: [CommonModule, BooksRoutingModule, FormsModule, ReactiveFormsModule],\n  exports: [BooksComponent],\n  declarations: [BooksComponent],\n  providers: [PersistanceService],\n})\nexport class BooksModule {}\n","import { Injectable, Inject } from \"@angular/core\";\n\n@Injectable()\nexport class PersistanceService {\n  constructor() {}\n\n  set(key: string, data: any): void {\n    try {\n      sessionStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.error(\"Error saving to localStorage\", err);\n    }\n  }\n\n  get(key: string): string {\n    try {\n      return JSON.parse(sessionStorage.getItem(key));\n    } catch (err) {\n      console.error(\"Error getting data from localStorage\", err);\n      return null;\n    }\n  }\n\n  clear(): void {\n    sessionStorage.clear();\n  }\n}\n"],"names":["catchError","map","apiUrl","GoogleBookService","constructor","http","findBook","title","get","pipe","data","items","filter","item","saleInfo","saleability","err","factory","providedIn","RouterModule","BooksComponent","routes","path","component","BooksRoutingModule","forChild","imports","exports","PLATFORM_ID","isPlatformBrowser","i0","googleBookService","router","fb","storageService","platformId","ngOnInit","booksArray","storedItems","console","log","searchForm","group","searchQuery","clearStore","clear","reset","bookQuery","userQuery","length","set","searchString","subscribe","books","onGoToBookDetail","book","navigationExtras","state","navigate","bookTrackbyFn","index","bookId","selectors","decls","vars","consts","template","ctx","CommonModule","FormsModule","ReactiveFormsModule","PersistanceService","BooksModule","declarations","key","sessionStorage","setItem","JSON","stringify","error","parse","getItem"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}